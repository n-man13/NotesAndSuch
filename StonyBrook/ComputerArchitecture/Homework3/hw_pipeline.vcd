$date
	Fri Oct 31 12:04:03 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module pipeline_processor_tb $end
$var wire 1 ! done $end
$var reg 1 " clk $end
$var reg 1 # reset $end
$scope module DUT $end
$var wire 32 $ alu_input_A [31:0] $end
$var wire 1 % branch_taken_ex $end
$var wire 32 & branch_target_ex [31:0] $end
$var wire 1 " clk $end
$var wire 1 ! done $end
$var wire 1 ' flush_ifid $end
$var wire 32 ( initial_pc [31:0] $end
$var wire 1 # reset $end
$var wire 1 ) stall $end
$var wire 1 * writeback_enable_wb $end
$var wire 5 + writeback_reg_wb [4:0] $end
$var wire 32 , writeback_data_wb [31:0] $end
$var wire 32 - reg_read2_id [31:0] $end
$var wire 32 . reg_read1_id [31:0] $end
$var wire 32 / next_pc_if [31:0] $end
$var wire 5 0 memwb_writereg_out [4:0] $end
$var wire 32 1 memwb_memread_out [31:0] $end
$var wire 32 2 memwb_aluout_out [31:0] $end
$var wire 1 3 memwb_RegWrite_out $end
$var wire 1 4 memwb_MemToReg_out $end
$var wire 1 5 memwb_Halt_out $end
$var wire 32 6 mem_read_data_mem [31:0] $end
$var wire 32 7 instr_if [31:0] $end
$var wire 32 8 imm_ext_id [31:0] $end
$var wire 32 9 ifid_next_pc_out [31:0] $end
$var wire 32 : ifid_instr_out [31:0] $end
$var wire 5 ; idex_write_reg [4:0] $end
$var wire 5 < idex_rt_out [4:0] $end
$var wire 5 = idex_rs_out [4:0] $end
$var wire 32 > idex_regdata2_out [31:0] $end
$var wire 32 ? idex_regdata1_out [31:0] $end
$var wire 5 @ idex_rd_out [4:0] $end
$var wire 32 A idex_next_pc_out [31:0] $end
$var wire 32 B idex_imm_out [31:0] $end
$var wire 1 C idex_RegWrite $end
$var wire 1 D idex_RegDst $end
$var wire 1 E idex_MemWrite $end
$var wire 1 F idex_MemToReg $end
$var wire 1 G idex_MemRead $end
$var wire 1 H idex_Halt_out $end
$var wire 1 I idex_Branch $end
$var wire 1 J idex_ALUSrc $end
$var wire 3 K idex_ALUOp [2:0] $end
$var wire 5 L id_rt [4:0] $end
$var wire 5 M id_rs [4:0] $end
$var wire 5 N id_rd [4:0] $end
$var wire 6 O id_opcode [5:0] $end
$var wire 16 P id_imm [15:0] $end
$var wire 6 Q id_funct [5:0] $end
$var wire 1 R halt_if $end
$var wire 1 S halt_id $end
$var wire 32 T forward_from_memwb [31:0] $end
$var wire 5 U exmem_write_reg_out [4:0] $end
$var wire 32 V exmem_write_data_out [31:0] $end
$var wire 32 W exmem_alu_result_out [31:0] $end
$var wire 1 X exmem_RegWrite_out $end
$var wire 1 Y exmem_MemWrite_out $end
$var wire 1 Z exmem_MemToReg_out $end
$var wire 1 [ exmem_MemRead_out $end
$var wire 1 \ exmem_Halt_out $end
$var wire 32 ] alu_result_ex [31:0] $end
$var wire 32 ^ alu_input_B_pre [31:0] $end
$var wire 32 _ alu_input_B [31:0] $end
$var wire 1 ` RegWrite_id $end
$var wire 1 a RegDst_id $end
$var wire 1 b MemWrite_id $end
$var wire 1 c MemToReg_id $end
$var wire 1 d MemRead_id $end
$var wire 2 e ForwardB [1:0] $end
$var wire 2 f ForwardA [1:0] $end
$var wire 1 g ExtOp_id $end
$var wire 1 h Branch_id $end
$var wire 1 i ALUSrc_id $end
$var wire 3 j ALUOp_id [2:0] $end
$var reg 32 k alu_input_A_reg [31:0] $end
$var reg 32 l alu_input_Bpre_reg [31:0] $end
$var reg 32 m pc [31:0] $end
$scope module CU $end
$var wire 6 n funct [5:0] $end
$var wire 6 o opcode [5:0] $end
$var reg 3 p ALUOp [2:0] $end
$var reg 1 i ALUSrc $end
$var reg 1 h Branch $end
$var reg 1 g ExtOp $end
$var reg 1 d MemRead $end
$var reg 1 c MemToReg $end
$var reg 1 b MemWrite $end
$var reg 1 a RegDst $end
$var reg 1 ` RegWrite $end
$upscope $end
$scope module EXMEM $end
$var wire 1 " clk $end
$var wire 1 # reset $end
$var wire 5 q write_reg_in [4:0] $end
$var wire 32 r write_data_in [31:0] $end
$var wire 32 s alu_result_in [31:0] $end
$var wire 1 C RegWrite_in $end
$var wire 1 E MemWrite_in $end
$var wire 1 F MemToReg_in $end
$var wire 1 G MemRead_in $end
$var wire 1 H Halt_in $end
$var reg 1 \ Halt_out $end
$var reg 1 [ MemRead_out $end
$var reg 1 Z MemToReg_out $end
$var reg 1 Y MemWrite_out $end
$var reg 1 X RegWrite_out $end
$var reg 32 t alu_result_out [31:0] $end
$var reg 32 u write_data_out [31:0] $end
$var reg 5 v write_reg_out [4:0] $end
$upscope $end
$scope module FU $end
$var wire 5 w EX_MEM_Rd [4:0] $end
$var wire 1 X EX_MEM_RegWrite $end
$var wire 1 3 MEM_WB_RegWrite $end
$var wire 5 x MEM_WB_Rd [4:0] $end
$var wire 5 y ID_EX_Rt [4:0] $end
$var wire 5 z ID_EX_Rs [4:0] $end
$var reg 2 { ForwardA [1:0] $end
$var reg 2 | ForwardB [1:0] $end
$upscope $end
$scope module IDEX $end
$var wire 3 } ALUOp_in [2:0] $end
$var wire 1 i ALUSrc_in $end
$var wire 1 h Branch_in $end
$var wire 1 S Halt_in $end
$var wire 1 d MemRead_in $end
$var wire 1 c MemToReg_in $end
$var wire 1 b MemWrite_in $end
$var wire 1 a RegDst_in $end
$var wire 1 ` RegWrite_in $end
$var wire 1 " clk $end
$var wire 32 ~ imm_in [31:0] $end
$var wire 5 !" rd_in [4:0] $end
$var wire 1 # reset $end
$var wire 5 "" rs_in [4:0] $end
$var wire 5 #" rt_in [4:0] $end
$var wire 1 $" stall $end
$var wire 32 %" regdata2_in [31:0] $end
$var wire 32 &" regdata1_in [31:0] $end
$var wire 32 '" next_pc_in [31:0] $end
$var reg 3 (" ALUOp_out [2:0] $end
$var reg 1 J ALUSrc_out $end
$var reg 1 I Branch_out $end
$var reg 1 H Halt_out $end
$var reg 1 G MemRead_out $end
$var reg 1 F MemToReg_out $end
$var reg 1 E MemWrite_out $end
$var reg 1 D RegDst_out $end
$var reg 1 C RegWrite_out $end
$var reg 32 )" imm_out [31:0] $end
$var reg 32 *" next_pc_out [31:0] $end
$var reg 5 +" rd_out [4:0] $end
$var reg 32 ," regdata1_out [31:0] $end
$var reg 32 -" regdata2_out [31:0] $end
$var reg 5 ." rs_out [4:0] $end
$var reg 5 /" rt_out [4:0] $end
$upscope $end
$scope module IFID $end
$var wire 1 " clk $end
$var wire 1 0" flush $end
$var wire 32 1" next_pc_in [31:0] $end
$var wire 1 # reset $end
$var wire 1 2" stall $end
$var wire 32 3" instr_in [31:0] $end
$var reg 32 4" instr_out [31:0] $end
$var reg 32 5" next_pc_out [31:0] $end
$upscope $end
$scope module MEMWB $end
$var wire 1 \ Halt_in $end
$var wire 1 Z MemToReg_in $end
$var wire 1 X RegWrite_in $end
$var wire 32 6" alu_result_in [31:0] $end
$var wire 1 " clk $end
$var wire 1 # reset $end
$var wire 5 7" write_reg_in [4:0] $end
$var wire 32 8" mem_read_in [31:0] $end
$var reg 1 5 Halt_out $end
$var reg 1 4 MemToReg_out $end
$var reg 1 3 RegWrite_out $end
$var reg 32 9" alu_result_out [31:0] $end
$var reg 32 :" mem_read_out [31:0] $end
$var reg 5 ;" write_reg_out [4:0] $end
$upscope $end
$scope module alu_ex $end
$var wire 32 <" A [31:0] $end
$var wire 3 =" ALU_Sel [2:0] $end
$var wire 32 >" B [31:0] $end
$var reg 32 ?" ALU_Out [31:0] $end
$upscope $end
$scope module data_mem $end
$var wire 32 @" addr [31:0] $end
$var wire 1 " clk $end
$var wire 32 A" readData [31:0] $end
$var wire 32 B" writeData [31:0] $end
$var wire 1 Y writeEnable $end
$var integer 32 C" i [31:0] $end
$upscope $end
$scope module prog_mem $end
$var wire 32 D" pc [31:0] $end
$var wire 32 E" instruction [31:0] $end
$var reg 32 F" instruction_reg [31:0] $end
$upscope $end
$scope module regFile $end
$var wire 1 " clk $end
$var wire 32 G" readData1 [31:0] $end
$var wire 32 H" readData2 [31:0] $end
$var wire 5 I" readReg1 [4:0] $end
$var wire 5 J" readReg2 [4:0] $end
$var wire 32 K" writeData [31:0] $end
$var wire 1 * writeEnable $end
$var wire 5 L" writeReg [4:0] $end
$var integer 32 M" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100000 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b100000000001000000000000000110 F"
b100000000001000000000000000110 E"
b10100 D"
b100000000 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b100000000001000000000000000110 3"
02"
b10101 1"
00"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
0$"
b0 #"
b0 ""
b0 !"
b0 ~
b110 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b110 p
b0 o
b0 n
b10100 m
b0 l
b0 k
b110 j
0i
0h
0g
b0 f
b0 e
0d
0c
0b
1a
1`
b0 _
b0 ^
b0 ]
0\
0[
0Z
0Y
0X
b0 W
b0 V
b0 U
b0 T
0S
0R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
0J
0I
0H
0G
0F
0E
0D
0C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b100000000001000000000000000110 7
b0 6
05
04
03
b0 2
b0 1
b0 0
b10101 /
b0 .
b0 -
b0 ,
b0 +
0*
0)
b10100 (
0'
b0 &
0%
b0 $
1#
1"
0!
$end
#5000
0"
#10000
1"
#12000
0#
#15000
0"
#20000
b110 8
b110 ~
1i
b0 j
b0 p
b0 }
0a
1`
b110 P
b100 L
b100 #"
b100 J"
b110 Q
b110 n
b1000 O
b1000 o
b1100000000000000000000010100 7
b1100000000000000000000010100 3"
b1100000000000000000000010100 E"
b1100000000000000000000010100 F"
b10101 9
b10101 '"
b10101 5"
b100000000001000000000000000110 :
b100000000001000000000000000110 4"
b110 K
b110 ("
b110 ="
1D
1C
b10110 /
b10110 1"
b10101 m
b10101 D"
1"
#25000
0"
#30000
b10100 8
b10100 ~
0i
0`
b10101100010000100000000000000000 7
b10101100010000100000000000000000 3"
b10101100010000100000000000000000 E"
b10101100010000100000000000000000 F"
b110 ]
b110 s
b110 ?"
b110 _
b110 >"
b100 ;
b100 q
b10100 P
b0 L
b0 #"
b0 J"
b10100 Q
b10100 n
b11 O
b11 o
b10111 /
b10111 1"
b10110 m
b10110 D"
1X
b0 K
b0 ("
b0 ="
1J
0D
b100 <
b100 y
b100 /"
b110 B
b110 )"
b10101 A
b10101 *"
b10110 9
b10110 '"
b10110 5"
b1100000000000000000000010100 :
b1100000000000000000000010100 4"
1"
#35000
0"
#40000
b0 8
b0 ~
1i
1b
b0 ]
b0 s
b0 ?"
1R
b0 P
b10 L
b10 #"
b10 J"
b10 M
b10 ""
b10 I"
b0 Q
b0 n
b101011 O
b101011 o
b0 ;
b0 q
b0 _
b0 >"
b11111100000000000000000000000000 7
b11111100000000000000000000000000 3"
b11111100000000000000000000000000 E"
b11111100000000000000000000000000 F"
b10111 9
b10111 '"
b10111 5"
b10101100010000100000000000000000 :
b10101100010000100000000000000000 4"
0J
0C
b0 <
b0 y
b0 /"
b10100 B
b10100 )"
b10110 A
b10110 *"
b100 U
b100 v
b100 w
b100 7"
b110 W
b110 t
b110 6"
b110 @"
1*
13
b11000 /
b11000 1"
b10111 m
b10111 D"
1"
#45000
0"
#50000
0i
0b
b110 ,
b110 K"
b110 T
b10 ;
b10 q
1S
b0 L
b0 #"
b0 J"
b0 M
b0 ""
b0 I"
b111111 O
b111111 o
b100 +
b100 L"
b100 0
b100 x
b100 ;"
b110 2
b110 9"
0X
b0 U
b0 v
b0 w
b0 7"
b0 W
b0 t
b0 6"
b0 @"
1J
1E
b10 <
b10 y
b10 /"
b10 =
b10 z
b10 ."
b0 B
b0 )"
b10111 A
b10111 *"
b11000 9
b11000 '"
b11000 5"
b11111100000000000000000000000000 :
b11111100000000000000000000000000 4"
1"
#55000
0"
#60000
b0 ;
b0 q
b0 ,
b0 K"
b0 T
1H
0J
0E
b0 <
b0 y
b0 /"
b0 =
b0 z
b0 ."
b11000 A
b11000 *"
1Y
b10 U
b10 v
b10 w
b10 7"
0*
03
b0 +
b0 L"
b0 0
b0 x
b0 ;"
b0 2
b0 9"
1"
#65000
0"
#70000
b10 +
b10 L"
b10 0
b10 x
b10 ;"
1\
0Y
b0 U
b0 v
b0 w
b0 7"
1"
#75000
0"
#80000
1!
15
b0 +
b0 L"
b0 0
b0 x
b0 ;"
1"
#85000
0"
#90000
1"
#91000
