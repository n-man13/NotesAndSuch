$date
	Fri Oct 31 10:42:40 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module pipeline_processor_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module DUT $end
$var wire 32 # alu_input_A [31:0] $end
$var wire 32 $ alu_input_B_pre [31:0] $end
$var wire 1 % branch_taken_ex $end
$var wire 32 & branch_target_ex [31:0] $end
$var wire 1 ! clk $end
$var wire 1 ' flush_ifid $end
$var wire 32 ( initial_pc [31:0] $end
$var wire 1 " reset $end
$var wire 1 ) stall $end
$var wire 1 * writeback_enable_wb $end
$var wire 5 + writeback_reg_wb [4:0] $end
$var wire 32 , writeback_data_wb [31:0] $end
$var wire 32 - reg_read2_id [31:0] $end
$var wire 32 . reg_read1_id [31:0] $end
$var wire 32 / next_pc_if [31:0] $end
$var wire 5 0 memwb_writereg_out [4:0] $end
$var wire 32 1 memwb_memread_out [31:0] $end
$var wire 32 2 memwb_aluout_out [31:0] $end
$var wire 1 3 memwb_RegWrite_out $end
$var wire 1 4 memwb_MemToReg_out $end
$var wire 32 5 mem_read_data_mem [31:0] $end
$var wire 32 6 instr_if [31:0] $end
$var wire 32 7 imm_ext_id [31:0] $end
$var wire 32 8 ifid_next_pc_out [31:0] $end
$var wire 32 9 ifid_instr_out [31:0] $end
$var wire 5 : idex_write_reg [4:0] $end
$var wire 5 ; idex_rt_out [4:0] $end
$var wire 5 < idex_rs_out [4:0] $end
$var wire 32 = idex_regdata2_out [31:0] $end
$var wire 32 > idex_regdata1_out [31:0] $end
$var wire 5 ? idex_rd_out [4:0] $end
$var wire 32 @ idex_next_pc_out [31:0] $end
$var wire 32 A idex_imm_out [31:0] $end
$var wire 1 B idex_RegWrite $end
$var wire 1 C idex_RegDst $end
$var wire 1 D idex_MemWrite $end
$var wire 1 E idex_MemToReg $end
$var wire 1 F idex_MemRead $end
$var wire 1 G idex_Branch $end
$var wire 1 H idex_ALUSrc $end
$var wire 3 I idex_ALUOp [2:0] $end
$var wire 5 J id_rt [4:0] $end
$var wire 5 K id_rs [4:0] $end
$var wire 5 L id_rd [4:0] $end
$var wire 6 M id_opcode [5:0] $end
$var wire 16 N id_imm [15:0] $end
$var wire 6 O id_funct [5:0] $end
$var wire 5 P exmem_write_reg_out [4:0] $end
$var wire 32 Q exmem_write_data_out [31:0] $end
$var wire 32 R exmem_alu_result_out [31:0] $end
$var wire 1 S exmem_RegWrite_out $end
$var wire 1 T exmem_MemWrite_out $end
$var wire 1 U exmem_MemToReg_out $end
$var wire 1 V exmem_MemRead_out $end
$var wire 32 W alu_result_ex [31:0] $end
$var wire 32 X alu_input_B [31:0] $end
$var wire 1 Y RegWrite_id $end
$var wire 1 Z RegDst_id $end
$var wire 1 [ MemWrite_id $end
$var wire 1 \ MemToReg_id $end
$var wire 1 ] MemRead_id $end
$var wire 1 ^ Branch_id $end
$var wire 1 _ ALUSrc_id $end
$var wire 3 ` ALUOp_id [2:0] $end
$var reg 32 a pc [31:0] $end
$scope module CU $end
$var wire 6 b funct [5:0] $end
$var wire 6 c opcode [5:0] $end
$var reg 3 d ALUOp [2:0] $end
$var reg 1 _ ALUSrc $end
$var reg 1 ^ Branch $end
$var reg 1 ] MemRead $end
$var reg 1 \ MemToReg $end
$var reg 1 [ MemWrite $end
$var reg 1 Z RegDst $end
$var reg 1 Y RegWrite $end
$upscope $end
$scope module EXMEM $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 5 e write_reg_in [4:0] $end
$var wire 32 f write_data_in [31:0] $end
$var wire 32 g alu_result_in [31:0] $end
$var wire 1 B RegWrite_in $end
$var wire 1 D MemWrite_in $end
$var wire 1 E MemToReg_in $end
$var wire 1 F MemRead_in $end
$var reg 1 V MemRead_out $end
$var reg 1 U MemToReg_out $end
$var reg 1 T MemWrite_out $end
$var reg 1 S RegWrite_out $end
$var reg 32 h alu_result_out [31:0] $end
$var reg 32 i write_data_out [31:0] $end
$var reg 5 j write_reg_out [4:0] $end
$upscope $end
$scope module IDEX $end
$var wire 3 k ALUOp_in [2:0] $end
$var wire 1 _ ALUSrc_in $end
$var wire 1 ^ Branch_in $end
$var wire 1 ] MemRead_in $end
$var wire 1 \ MemToReg_in $end
$var wire 1 [ MemWrite_in $end
$var wire 1 Z RegDst_in $end
$var wire 1 Y RegWrite_in $end
$var wire 1 ! clk $end
$var wire 32 l imm_in [31:0] $end
$var wire 5 m rd_in [4:0] $end
$var wire 1 " reset $end
$var wire 5 n rs_in [4:0] $end
$var wire 5 o rt_in [4:0] $end
$var wire 1 p stall $end
$var wire 32 q regdata2_in [31:0] $end
$var wire 32 r regdata1_in [31:0] $end
$var wire 32 s next_pc_in [31:0] $end
$var reg 3 t ALUOp_out [2:0] $end
$var reg 1 H ALUSrc_out $end
$var reg 1 G Branch_out $end
$var reg 1 F MemRead_out $end
$var reg 1 E MemToReg_out $end
$var reg 1 D MemWrite_out $end
$var reg 1 C RegDst_out $end
$var reg 1 B RegWrite_out $end
$var reg 32 u imm_out [31:0] $end
$var reg 32 v next_pc_out [31:0] $end
$var reg 5 w rd_out [4:0] $end
$var reg 32 x regdata1_out [31:0] $end
$var reg 32 y regdata2_out [31:0] $end
$var reg 5 z rs_out [4:0] $end
$var reg 5 { rt_out [4:0] $end
$upscope $end
$scope module IFID $end
$var wire 1 ! clk $end
$var wire 1 | flush $end
$var wire 32 } next_pc_in [31:0] $end
$var wire 1 " reset $end
$var wire 1 ~ stall $end
$var wire 32 !" instr_in [31:0] $end
$var reg 32 "" instr_out [31:0] $end
$var reg 32 #" next_pc_out [31:0] $end
$upscope $end
$scope module MEMWB $end
$var wire 1 U MemToReg_in $end
$var wire 1 S RegWrite_in $end
$var wire 32 $" alu_result_in [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 5 %" write_reg_in [4:0] $end
$var wire 32 &" mem_read_in [31:0] $end
$var reg 1 4 MemToReg_out $end
$var reg 1 3 RegWrite_out $end
$var reg 32 '" alu_result_out [31:0] $end
$var reg 32 (" mem_read_out [31:0] $end
$var reg 5 )" write_reg_out [4:0] $end
$upscope $end
$scope module alu_ex $end
$var wire 32 *" A [31:0] $end
$var wire 3 +" ALU_Sel [2:0] $end
$var wire 32 ," B [31:0] $end
$var reg 32 -" ALU_Out [31:0] $end
$upscope $end
$scope module data_mem $end
$var wire 32 ." addr [31:0] $end
$var wire 1 ! clk $end
$var wire 32 /" readData [31:0] $end
$var wire 32 0" writeData [31:0] $end
$var wire 1 T writeEnable $end
$var integer 32 1" i [31:0] $end
$upscope $end
$scope module prog_mem $end
$var wire 32 2" instruction [31:0] $end
$var wire 32 3" pc [31:0] $end
$var reg 32 4" instruction_reg [31:0] $end
$upscope $end
$scope module regFile $end
$var wire 1 ! clk $end
$var wire 32 5" readData1 [31:0] $end
$var wire 32 6" readData2 [31:0] $end
$var wire 5 7" readReg1 [4:0] $end
$var wire 5 8" readReg2 [4:0] $end
$var wire 32 9" writeData [31:0] $end
$var wire 1 * writeEnable $end
$var wire 5 :" writeReg [4:0] $end
$var integer 32 ;" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module processor_tb $end
$scope module myProcessor $end
$var wire 32 <" ADDI_in_wire [31:0] $end
$var wire 32 =" ANDI_in_wire [31:0] $end
$var wire 32 >" ORI_in_wire [31:0] $end
$var wire 32 ?" initial_pc [31:0] $end
$var wire 1 @" write_enable $end
$var wire 32 A" reg_data2 [31:0] $end
$var wire 32 B" reg_data1 [31:0] $end
$var wire 32 C" read_data_wire [31:0] $end
$var wire 32 D" instruction [31:0] $end
$var wire 16 E" immediate_wire [15:0] $end
$var wire 1 F" clk $end
$var wire 32 G" ORI_out_wire [31:0] $end
$var wire 32 H" ANDI_out_wire [31:0] $end
$var wire 32 I" ALU_out_wire [31:0] $end
$var wire 32 J" ADDI_out_wire [31:0] $end
$var reg 32 K" ADDI_in [31:0] $end
$var reg 3 L" ALU_Sel [2:0] $end
$var reg 32 M" ANDI_in [31:0] $end
$var reg 32 N" ORI_in [31:0] $end
$var reg 32 O" a [31:0] $end
$var reg 32 P" b [31:0] $end
$var reg 5 Q" base [4:0] $end
$var reg 6 R" funct [5:0] $end
$var reg 32 S" mem_address [31:0] $end
$var reg 32 T" mem_data [31:0] $end
$var reg 6 U" opcode [5:0] $end
$var reg 32 V" pc [31:0] $end
$var reg 5 W" rd [4:0] $end
$var reg 5 X" read_reg1 [4:0] $end
$var reg 5 Y" read_reg2 [4:0] $end
$var reg 5 Z" rs [4:0] $end
$var reg 5 [" rt [4:0] $end
$var reg 32 \" write_data [31:0] $end
$var reg 1 ]" write_enable_mem $end
$var reg 1 ^" write_enable_reg $end
$var reg 5 _" write_reg [4:0] $end
$scope module mem $end
$var wire 32 `" addr [31:0] $end
$var wire 32 a" readData [31:0] $end
$var wire 32 b" writeData [31:0] $end
$var wire 1 ]" writeEnable $end
$var wire 1 F" clk $end
$var integer 32 c" i [31:0] $end
$upscope $end
$scope module myADDI $end
$var wire 16 d" immediate [15:0] $end
$var wire 32 e" reg_in [31:0] $end
$var wire 32 f" sign_extended_value [31:0] $end
$var wire 32 g" reg_out [31:0] $end
$scope module myADDI_ALU $end
$var wire 32 h" A [31:0] $end
$var wire 3 i" ALU_Sel [2:0] $end
$var wire 32 j" B [31:0] $end
$var reg 32 k" ALU_Out [31:0] $end
$upscope $end
$upscope $end
$scope module myALU $end
$var wire 32 l" A [31:0] $end
$var wire 3 m" ALU_Sel [2:0] $end
$var wire 32 n" B [31:0] $end
$var reg 32 o" ALU_Out [31:0] $end
$upscope $end
$scope module myANDI $end
$var wire 16 p" immediate [15:0] $end
$var wire 32 q" reg_in [31:0] $end
$var wire 32 r" zero_extended_value [31:0] $end
$var wire 32 s" reg_out [31:0] $end
$scope module myALU $end
$var wire 32 t" A [31:0] $end
$var wire 3 u" ALU_Sel [2:0] $end
$var wire 32 v" B [31:0] $end
$var reg 32 w" ALU_Out [31:0] $end
$upscope $end
$upscope $end
$scope module myClock $end
$var reg 1 F" clk $end
$upscope $end
$scope module myORI $end
$var wire 16 x" immediate [15:0] $end
$var wire 32 y" reg_in [31:0] $end
$var wire 32 z" zero_extended_immediate [31:0] $end
$var wire 32 {" reg_out [31:0] $end
$scope module myALU $end
$var wire 32 |" A [31:0] $end
$var wire 3 }" ALU_Sel [2:0] $end
$var wire 32 ~" B [31:0] $end
$var reg 32 !# ALU_Out [31:0] $end
$upscope $end
$upscope $end
$scope module prog_mem $end
$var wire 32 "# pc [31:0] $end
$var wire 32 ## instruction [31:0] $end
$var reg 32 $# instruction_reg [31:0] $end
$upscope $end
$scope module regFile $end
$var wire 1 F" clk $end
$var wire 32 %# readData1 [31:0] $end
$var wire 32 &# readData2 [31:0] $end
$var wire 5 '# readReg1 [4:0] $end
$var wire 5 (# readReg2 [4:0] $end
$var wire 32 )# writeData [31:0] $end
$var wire 1 ^" writeEnable $end
$var wire 5 *# writeReg [4:0] $end
$var integer 32 +# i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100000 +#
b1000 *#
b100 )#
b0 (#
b0 '#
b0 &#
b0 %#
b100000000010000000000000000100 $#
b100000000010000000000000000100 ##
b0 "#
bx1xx !#
b100 ~"
b11 }"
bx |"
bx1xx {"
b100 z"
bx y"
b100 x"
b0x00 w"
b100 v"
b10 u"
bx t"
b0x00 s"
b100 r"
bx q"
b100 p"
b0 o"
b0 n"
b110 m"
b0 l"
b100 k"
b100 j"
b0 i"
b0 h"
b100 g"
b100 f"
b0 e"
b100 d"
b100000000 c"
bx b"
bx a"
bx `"
b1000 _"
1^"
0]"
b100 \"
b1000 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b1000 U"
bx T"
bx S"
b0 R"
bx Q"
b0 P"
b0 O"
bx N"
bx M"
b110 L"
b0 K"
b100 J"
b0 I"
b0x00 H"
bx1xx G"
1F"
b100 E"
b100000000010000000000000000100 D"
bx C"
b0 B"
b0 A"
1@"
b0 ?"
bx >"
bx ="
b0 <"
b100000 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b100000000010000000000000000100 4"
b0 3"
b100000000010000000000000000100 2"
b100000000 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b100000000010000000000000000100 !"
0~
b1 }
0|
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
0p
b0 o
b0 n
b0 m
b0 l
b110 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b110 d
b0 c
b0 b
b0 a
b110 `
0_
0^
0]
0\
0[
1Z
1Y
b0 X
b0 W
0V
0U
0T
0S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
0H
0G
0F
0E
0D
0C
0B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b100000000010000000000000000100 6
b0 5
04
03
b0 2
b0 1
b0 0
b1 /
b0 .
b0 -
b0 ,
b0 +
0*
0)
b0 (
0'
b0 &
0%
b0 $
b0 #
1"
0!
$end
#5000
0F"
1!
#10000
b1111 \"
b1111 )#
b1111 J"
b1111 g"
b1111 k"
b0xxxx H"
b0xxxx s"
b0xxxx w"
bx1111 G"
bx1111 {"
bx1111 !#
b1111 f"
b1111 j"
b1111 r"
b1111 v"
b1111 z"
b1111 ~"
b1111 E"
b1111 d"
b1111 p"
b1111 x"
b1001 _"
b1001 *#
b1001 ["
b100000000010010000000000001111 D"
b100000000010010000000000001111 ##
b100000000010010000000000001111 $#
1@"
1^"
b1 V"
b1 "#
1F"
0!
#12000
0"
#15000
1_
b0 `
b0 d
b0 k
0Z
1Y
b100 7
b100 l
b100 N
b1000 J
b1000 o
b1000 8"
b100 O
b100 b
b1000 M
b1000 c
b100000000010010000000000001111 6
b100000000010010000000000001111 !"
b100000000010010000000000001111 2"
b100000000010010000000000001111 4"
b1 8
b1 s
b1 #"
b100000000010000000000000000100 9
b100000000010000000000000000100 ""
b110 I
b110 t
b110 +"
1C
1B
b10 /
b10 }
b1 a
b1 3"
0F"
1!
#20000
b10100 \"
b10100 )#
b10100 J"
b10100 g"
b10100 k"
b0x0x00 H"
b0x0x00 s"
b0x0x00 w"
bx1x1xx G"
bx1x1xx {"
bx1x1xx !#
b10100 f"
b10100 j"
b10100 r"
b10100 v"
b10100 z"
b10100 ~"
b10100 E"
b10100 d"
b10100 p"
b10100 x"
b1010 _"
b1010 *#
b1010 ["
b100000000010100000000000010100 D"
b100000000010100000000000010100 ##
b100000000010100000000000010100 $#
1@"
1^"
b10 V"
b10 "#
1F"
0!
#25000
1_
1Y
b100000000010100000000000010100 6
b100000000010100000000000010100 !"
b100000000010100000000000010100 2"
b100000000010100000000000010100 4"
b100 W
b100 g
b100 -"
b100 X
b100 ,"
b1000 :
b1000 e
b1111 7
b1111 l
b1111 N
b1001 J
b1001 o
b1001 8"
b1111 O
b1111 b
b11 /
b11 }
b10 a
b10 3"
1S
b0 I
b0 t
b0 +"
1H
0C
b1000 ;
b1000 {
b100 A
b100 u
b1 @
b1 v
b10 8
b10 s
b10 #"
b100000000010010000000000001111 9
b100000000010010000000000001111 ""
0F"
1!
#30000
b1000 \"
b1000 )#
b1000 J"
b1000 g"
b1000 k"
b0x000 H"
b0x000 s"
b0x000 w"
bx1xxx G"
bx1xxx {"
bx1xxx !#
b1000 f"
b1000 j"
b1000 r"
b1000 v"
b1000 z"
b1000 ~"
b1000 E"
b1000 d"
b1000 p"
b1000 x"
b10001 _"
b10001 *#
b10001 ["
b100000000100010000000000001000 D"
b100000000100010000000000001000 ##
b100000000100010000000000001000 $#
1@"
1^"
b11 V"
b11 "#
1F"
0!
#35000
1_
1Y
b1111 W
b1111 g
b1111 -"
b10100 7
b10100 l
b10100 N
b1010 J
b1010 o
b1010 8"
b10100 O
b10100 b
b1001 :
b1001 e
b1111 X
b1111 ,"
b100000000100010000000000001000 6
b100000000100010000000000001000 !"
b100000000100010000000000001000 2"
b100000000100010000000000001000 4"
b11 8
b11 s
b11 #"
b100000000010100000000000010100 9
b100000000010100000000000010100 ""
b1001 ;
b1001 {
b1111 A
b1111 u
b10 @
b10 v
b1000 P
b1000 j
b1000 %"
b100 R
b100 h
b100 $"
b100 ."
1*
13
b100 /
b100 }
b11 a
b11 3"
0F"
1!
#40000
bx C"
bx a"
b0 H"
b0 s"
b0 w"
bx G"
bx {"
bx !#
bx J"
bx g"
bx k"
b0 f"
b0 j"
b0 r"
b0 v"
b0 z"
b0 ~"
b0 E"
b0 d"
b0 p"
b0 x"
b100 T"
b100 b"
1]"
bx S"
bx `"
bx <"
bx e"
bx h"
bx K"
b100 A"
b100 &#
b1000 Y"
b1000 (#
bx B"
bx %#
bx X"
bx '#
b1000 ["
b10001 Z"
b101011 U"
b10101110001010000000000000000000 D"
b10101110001010000000000000000000 ##
b10101110001010000000000000000000 $#
0@"
0^"
b100 V"
b100 "#
1F"
0!
#45000
b10100 W
b10100 g
b10100 -"
1_
1Y
b10101110001010000000000000000000 6
b10101110001010000000000000000000 !"
b10101110001010000000000000000000 2"
b10101110001010000000000000000000 4"
b100 ,
b100 9"
b1010 :
b1010 e
b10100 X
b10100 ,"
b1000 7
b1000 l
b1000 N
b10001 J
b10001 o
b10001 8"
b1000 O
b1000 b
b101 /
b101 }
b100 a
b100 3"
b1000 +
b1000 :"
b1000 0
b1000 )"
b100 2
b100 '"
b1001 P
b1001 j
b1001 %"
b1111 R
b1111 h
b1111 $"
b1111 ."
b1010 ;
b1010 {
b10100 A
b10100 u
b11 @
b11 v
b100 8
b100 s
b100 #"
b100000000100010000000000001000 9
b100000000100010000000000001000 ""
0F"
1!
#50000
b0x000 H"
b0x000 s"
b0x000 w"
bx1xxx G"
bx1xxx {"
bx1xxx !#
b1000 f"
b1000 j"
b1000 r"
b1000 v"
b1000 z"
b1000 ~"
b1000 E"
b1000 d"
b1000 p"
b1000 x"
b1111 T"
b1111 b"
b1111 A"
b1111 &#
b1001 Y"
b1001 (#
b1001 ["
b10101110001010010000000000001000 D"
b10101110001010010000000000001000 ##
b10101110001010010000000000001000 $#
1]"
b101 V"
b101 "#
1F"
0!
#55000
1[
1_
0Y
b1000 W
b1000 g
b1000 -"
b0 7
b0 l
b0 N
b100 -
b100 q
b100 6"
b1000 J
b1000 o
b1000 8"
b10001 K
b10001 n
b10001 7"
b0 O
b0 b
b101011 M
b101011 c
b10001 :
b10001 e
b1000 X
b1000 ,"
b1111 ,
b1111 9"
b10101110001010010000000000001000 6
b10101110001010010000000000001000 !"
b10101110001010010000000000001000 2"
b10101110001010010000000000001000 4"
b101 8
b101 s
b101 #"
b10101110001010000000000000000000 9
b10101110001010000000000000000000 ""
b10001 ;
b10001 {
b1000 A
b1000 u
b100 @
b100 v
b1010 P
b1010 j
b1010 %"
b10100 R
b10100 h
b10100 $"
b10100 ."
b1001 +
b1001 :"
b1001 0
b1001 )"
b1111 2
b1111 '"
b110 /
b110 }
b101 a
b101 3"
0F"
1!
#60000
b0xxxxxxxxxxxxxx00 H"
b0xxxxxxxxxxxxxx00 s"
b0xxxxxxxxxxxxxx00 w"
bx11111111111111xx G"
bx11111111111111xx {"
bx11111111111111xx !#
b11111111111111111111111111111100 f"
b11111111111111111111111111111100 j"
b1111111111111100 r"
b1111111111111100 v"
b1111111111111100 z"
b1111111111111100 ~"
b1111111111111100 E"
b1111111111111100 d"
b1111111111111100 p"
b1111111111111100 x"
b10100 T"
b10100 b"
b10100 A"
b10100 &#
b1010 Y"
b1010 (#
b1010 ["
b10101110001010101111111111111100 D"
b10101110001010101111111111111100 ##
b10101110001010101111111111111100 $#
1]"
b110 V"
b110 "#
1F"
0!
#65000
b0 W
b0 g
b0 -"
1_
1[
b10101110001010101111111111111100 6
b10101110001010101111111111111100 !"
b10101110001010101111111111111100 2"
b10101110001010101111111111111100 4"
b10100 ,
b10100 9"
b1000 :
b1000 e
b0 X
b0 ,"
b1000 7
b1000 l
b1000 N
b1111 -
b1111 q
b1111 6"
b1001 J
b1001 o
b1001 8"
b1000 O
b1000 b
b111 /
b111 }
b110 a
b110 3"
b1010 +
b1010 :"
b1010 0
b1010 )"
b10100 2
b10100 '"
b10001 P
b10001 j
b10001 %"
b1000 R
b1000 h
b1000 $"
b1000 ."
1D
0B
b1000 ;
b1000 {
b10001 <
b10001 z
b0 A
b0 u
b100 $
b100 =
b100 f
b100 y
b101 @
b101 v
b110 8
b110 s
b110 #"
b10101110001010010000000000001000 9
b10101110001010010000000000001000 ""
0F"
1!
#70000
b0 H"
b0 s"
b0 w"
bx G"
bx {"
bx !#
b0 f"
b0 j"
b0 r"
b0 v"
b0 z"
b0 ~"
b0 E"
b0 d"
b0 p"
b0 x"
b111111 U"
b11111100000000000000000000000000 D"
b11111100000000000000000000000000 ##
b11111100000000000000000000000000 $#
0]"
b111 V"
b111 "#
1F"
0!
